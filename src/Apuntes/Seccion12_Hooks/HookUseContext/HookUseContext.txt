

// FORMA TRADICIONAL DE CONSUMIR EL CONTEXT

import React, { useState } from "react"; // Esto es importar con destructuracion

const Header = () => {
  const styles = {
    background: 'linear-gradient(20deg, #6813cb, #2575fc)',
    textAlign: 'center',
    borderRadius: '0.2em',
    color: '#FFF',
    padding: '0.3em',
    margin: '0.3em',
    fontSize: '14px'
  }

  return (
    <header style={styles}>
      <h1>
        Entendiendo el Hook useContext 
        <span
          role='img'
          aria-label='hook emoji'
        >
          ⚓
        </span> 
      </h1>
    </header>
  )
}

// { Provider, Consumer }
const MyContext = React.createContext()

const Nieto = () => (
  <MyContext.Consumer>
    {(context) => (
    <div>
      <p>Nieto {context.num}</p>
      <button onClick={context.addNum}>
        Nieto Dispatcher
      </button>
    </div>
    )}
  </MyContext.Consumer>
)

const Hijo = () => (
  <div>
    <p>Hijo</p>
    <Nieto />
  </div>
)

const App = () => {
  const [ num, setNum ] = useState(0)

  const addNum = () => setNum(num + 1)

  return (
    <MyContext.Provider value={{
      num,
      addNum
    }}>
    <div>
      <Header />
      <button onClick={addNum}>
        App ({ num })
      </button>
      <Hijo />
    </div>
    </MyContext.Provider>
  )
}


export default App


// El Context nos ayuda a poder consumir informacion y poder disparar eventos para poder actualizar esa informacion dentro de diferentes niveles de nuestra app
// y evitar estar pasando informacion de componente a componente a traves de pas props

// MyContext es parcticamente un objeto, en el cual contiene dos objetos internos el Provider y el Consumer. Este se puede destructurar asi const { Provider, Consumer } = React.createContext()
// Cuando no se destructuriza MyContext, se debe utilizar la anotacion de punto, es decir, asi: MyContext.Provider o MyContext.Consumer


// FORMA PRACTICA, FACIL DE CONSUMIR EL CONTEXT

import React, { useState, useContext } from "react"; // Esto es importar con destructuracion

const Header = () => {
  const styles = {
    background: 'linear-gradient(20deg, #6813cb, #2575fc)',
    textAlign: 'center',
    borderRadius: '0.2em',
    color: '#FFF',
    padding: '0.3em',
    margin: '0.3em',
    fontSize: '14px'
  }

  return (
    <header style={styles}>
      <h1>
        Entendiendo el Hook useContext 
        <span
          role='img'
          aria-label='hook emoji'
        >
          ⚓
        </span> 
      </h1>
    </header>
  )
}

// { Provider, Consumer }
const MyContext = React.createContext()


// Consumir context de forma tradicional
// const Nieto = () => (
//   <MyContext.Consumer>
//     {(context) => (
//     <div>
//       <p>Nieto {context.num}</p>
//       <button onClick={context.addNum}>
//         Nieto Dispatcher
//       </button>
//     </div>
//     )}
//   </MyContext.Consumer>
// )

const Nieto = () => {
  const context = useContext(MyContext) // aqui se puede hacer una destructuracion de las propiedades asi: { num, addNum }, para usarlas directamente en el marcado (quitanto el context)
    // De esta manrea el .Consumer no es utilizado

  return (
    <div>
      <p>Nieto {context.num}</p>
      <button onClick={context.addNum}>
        Nieto Dispatcher
      </button>
    </div>
  )
}

const Hijo = () => (
  <div>
    <p>Hijo</p>
    <Nieto />
  </div>
)

const App = () => {
  const [ num, setNum ] = useState(0)

  const addNum = () => setNum(num + 1)

  return (
    <MyContext.Provider value={{
      num,
      addNum
    }}>
    <div>
      <Header />
      <button onClick={addNum}>
        App ({ num })
      </button>
      <Hijo />
    </div>
    </MyContext.Provider>
  )
}


export default App

// Nota: Importar el useContext

// El Context nos ayuda a poder consumir informacion y poder disparar eventos para poder actualizar esa informacion dentro de diferentes niveles de nuestra app
// y evitar estar pasando informacion de componente a componente a traves de pas props

// MyContext es parcticamente un objeto, en el cual contiene dos objetos internos el Provider y el Consumer. Este se puede destructurar asi const { Provider, Consumer } = React.createContext()
// Cuando no se destructuriza MyContext, se debe utilizar la anotacion de punto, es decir, asi: MyContext.Provider o MyContext.Consumer
