import React, { useState } from "react"; // Esto es importar con destructuracion

const Header = () => {
  const styles = {
    background: 'linear-gradient(20deg, #6813cb, #2575fc)',
    textAlign: 'center',
    borderRadius: '0.2em',
    color: '#FFF',
    padding: '0.3em',
    margin: '0.3em',
    fontSize: '14px'
  }

  return (
    <header style={styles}>
      <h1>
        Hook useState con Objetos
        <span
          role='img'
          aria-label='hook emoji'
        >
          ⚓
        </span> 
      </h1>
    </header>
  )
}

const App = () => {
  const [ state, setState ] = useState({
    clicks: 0,
    title: ''
  })
  
  const addClicks = () => {
    setState({
      ...state, // PRIMERA forma de mezclar estados
      clicks: state.clicks + 1
    })
  }

  const handleInput = (e) => {
    const title = e.target.value // con esto se estrae la informacion que ha llegadod esde el input

    setState({ 
      ...state, // PRIMERA forma de mezclar estados
      title 
    })
  }
  
  return (
    <div>
      <Header />
      <input 
        type="text"
        value={state.title} // para que einput tambien se encuentre enlazada
        onChange={handleInput} 
      />
      <button onClick={addClicks}>
        Clicks ({ state.clicks })
      </button>
      <h3>{ state.title }</h3>
    </div>
  )
}


export default App

// Con los componentes basado en clases, si se desea trabajar un boton y un input, es necesario 
// mezclar las  nuevas propiedades que se tienen del estado y combinarlas con el estado que se tenia previamente
// para ello es necesario el operado sprit (...) (esta se debe pasar en los setState)
// Otra forma de mezclar el estado es creando nuestra propia funciona mezcladora del estado


// SEGUNDAAA forma de mezclar estados - de esta manera evitamos poner el operado sprint en cada setState

import React, { useState } from "react"; // Esto es importar con destructuracion

const Header = () => {
  const styles = {
    background: 'linear-gradient(20deg, #6813cb, #2575fc)',
    textAlign: 'center',
    borderRadius: '0.2em',
    color: '#FFF',
    padding: '0.3em',
    margin: '0.3em',
    fontSize: '14px'
  }

  return (
    <header style={styles}>
      <h1>
        Hook useState con Objetos
        <span
          role='img'
          aria-label='hook emoji'
        >
          ⚓
        </span> 
      </h1>
    </header>
  )
}

const App = () => {
  const [ state, setState ] = useState({
    clicks: 0,
    title: ''
  })
  
  // Segunda forma de mezclar estados - de esta manera evitamos poner el operado sprint en cada setState
  const mezclarEstado = (nextState) => { // normalmente esta funcion la nombran como merge
    setState({
      ...state,
      ...nextState
    })
  }

  const addClicks = () => {
    mezclarEstado({
      clicks: state.clicks + 1
    })
  }

  const handleInput = (e) => {
    const title = e.target.value // con esto se estrae la informacion que ha llegadod esde el input

    mezclarEstado({ 
      title 
    })
  }
  
  return (
    <div>
      <Header />
      <input 
        type="text"
        value={state.title} // para que einput tambien se encuentre enlazada
        onChange={handleInput} 
      />
      <button onClick={addClicks}>
        Clicks ({ state.clicks })
      </button>
      <h3>{ state.title }</h3>
    </div>
  )
}


export default App


// Con los componentes basado en clases, si se desea trabajar un boton y un input, es necesario 
// mezclar las  nuevas propiedades que se tienen del estado y combinarlas con el estado que se tenia previamente
// para ello es necesario el operado sprit (...) (esta se debe pasar en los setState)
// Otra forma de mezclar el estado es creando nuestra propia funciona mezcladora del estado







