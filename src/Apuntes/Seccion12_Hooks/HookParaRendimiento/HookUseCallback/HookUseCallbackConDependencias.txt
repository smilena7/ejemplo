import React, { useState, useCallback } from "react"; 

const Header = () => {
  const styles = {
    background: 'linear-gradient(20deg, #6813cb, #2575fc)',
    textAlign: 'center',
    borderRadius: '0.2em',
    color: '#FFF',
    padding: '0.3em',
    margin: '0.3em',
    fontSize: '14px'
  }

  return (
    <header style={styles}>
      <h1>
        Hook useCallback () con dependencias
        <span
          role='img'
          aria-label='hook emoji'
        >
          âš“
        </span> 
      </h1>
    </header>
  )
}

const getRandomColor = () => '#' + Math.random().toString(16).slice(2, 8)

const Button = React.memo(({ callback, children }) => {

  const styles = {
    padding: '1em',
    fontSize: '20px',
    background: getRandomColor()
  }

  return (
    <button 
      style={styles} 
      onClick={callback}
    >
      { children }
    </button>
  )
})

const App = () => {
  const [ a, setA ] = useState(0)
  const [ b, setB ] = useState(0)

  const incrementA = useCallback(() => { // incrementA es un manejador -callback-
    setA(a => a + 1) // de esta manera (en funcion directa) para que pueda renderizar y no se buguee al tener solo (a + 1) puesto que esta a se inicializa en 0, y al sumarle 1, siempre va a ser uno
  }, [])

  // Dependencia
  const incrementB = useCallback(() => { 
    setB(b => b + a) // en pantalla, Incrimen B no aumenta ya que en cuanto se guarda en memoria las propiedades, la propiedad a esta valiendo 0 al igual que la b, entonces 0 mas 0 siempre va a dar 0. Para solucionar eso se hace uso del segundo parametro del callback (array)
  }, [ a ]) // se le pasa la propiedad a ya que es la que buscamos obtener una vez es actualizada y asi actualice b 

  return (
    <div>
      <Header />
      <Button callback={incrementA}>
        Increment A
      </Button>
      <Button callback={incrementB}>
        Increment B 
      </Button>
      <h1>
        a: { a } b: { b }
      </h1>
    </div>
  )
}


export default App


// NOTA: IMPORTANTE no hacer optimizacion de resultados hasta que la aplicacion realmente la necesite (ya que esto genera un nivel de complejidad en nustros codigos y siendo principiantes nos podemos enredar un poco)

