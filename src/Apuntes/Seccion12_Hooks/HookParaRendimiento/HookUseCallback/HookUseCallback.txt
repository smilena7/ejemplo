import React, { useState, useCallback } from "react"; 

const Header = () => {
  const styles = {
    background: 'linear-gradient(20deg, #6813cb, #2575fc)',
    textAlign: 'center',
    borderRadius: '0.2em',
    color: '#FFF',
    padding: '0.3em',
    margin: '0.3em',
    fontSize: '14px'
  }

  return (
    <header style={styles}>
      <h1>
        Hook useCallback () para mejorar el rendimiento
        <span
          role='img'
          aria-label='hook emoji'
        >
          âš“
        </span> 
      </h1>
    </header>
  )
}

const getRandomColor = () => '#' + Math.random().toString(16).slice(2, 8)

const Button = React.memo(({ callback, children }) => {

  const styles = {
    padding: '1em',
    fontSize: '20px',
    background: getRandomColor()
  }

  return (
    <button 
      style={styles} 
      onClick={callback}
    >
      { children }
    </button>
  )
})

const App = () => {
  const [ a, setA ] = useState(0)

  const incrementA = useCallback(() => { // incrementA es un manejador -callback-
    setA(a => a + 1) // de esta manera (en funcion directa) para que pueda renderizar y no se buguee al tener solo (a + 1) puesto que esta a se inicializa en 0, y al sumarle 1, siempre va a ser uno
  }, [])

  return (
    <div>
      <Header />
      <Button callback={incrementA}>
        Increment A
      </Button>
      <h1>
        a: { a }
      </h1>
    </div>
  )
}


export default App

// Nota: Recordar inportar useCallback

// Hook useCallback: Este hook se usa en nuestros callback o manejadores (eje incrementA)
// y como segundo parametro recibe un array de propiedades o dependencias para que se vuelva a crear esta funcion en caso de que las propiedades o dependencias (que se pasen en el array) lleguen a cambiar

// De esta manera:

// const incrementA = useCallback(() => { // incrementA es un manejador -callback-
//   setA(a => a + 1) // de esta manera (en funcion directa) para que pueda renderizar y no se buguee al tener solo (a + 1) puesto que esta a se inicializa en 0, y al sumarle 1, siempre va a ser uno
// }, [])

// el componente Button no se va a renderiza el color del background cada vez que se de click al boton Incrementar A. Esta es la solucion para este caso ya que no basta solo con React.memo
// pues las propiedades (callback, children) del componente Button, no estan cambiando


